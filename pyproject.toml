[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "seestar-mcp"
version = "0.2.0-beta.0"
description = "MCP server for controlling SeestarS50 telescope"
authors = [
    {name = "David Perez", email = "david.perez@tacoops.io"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "fastmcp>=2.10.0,<3.0.0",
    "httpx>=0.25.0",
    "pydantic>=2.0.0",
    "astropy>=5.0.0",
    "numpy>=1.24.0",
    "pytz>=2023.3",
    "scapy>=2.6.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.8.0",
    "pre-commit>=3.0.0",
    "types-pytz",
    "build>=1.0.0",
    "twine>=4.0.0",
]

[project.scripts]
seestar-mcp = "seestar_mcp.server:main"

[tool.hatch.build.targets.wheel]
packages = ["src/seestar_mcp"]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | \.env
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "0.2.0-beta.0"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=seestar_mcp --cov-report=term-missing --cov-report=html --cov-fail-under=20"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src/seestar_mcp"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':' (conflicts with black)
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator (conflicts with black)
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    ".venv",
    "venv",
    ".env",
    ".mypy_cache",
    ".pytest_cache",
]
per-file-ignores = [
    "__init__.py:F401",  # Allow unused imports in __init__.py
    "tests/*:D100,D101,D102,D103,D104",  # Skip docstring checks in tests
]

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true
known_first_party = ["seestar_mcp"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[dependency-groups]
dev = [
    "bandit>=1.8.6",
    "black>=25.1.0",
    "flake8>=7.3.0",
    "isort>=6.0.1",
    "mypy>=1.17.0",
    "pre-commit>=4.2.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
]
