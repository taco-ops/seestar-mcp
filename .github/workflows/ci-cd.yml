name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      build_docker:
        description: 'Build and publish Docker image'
        required: false
        default: false
        type: boolean

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        uv venv --python ${{ matrix.python-version }}
        uv pip install -e ".[dev]"

    - name: Run pre-commit hooks
      run: |
        uv run pre-commit run --all-files

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        uv venv --python ${{ matrix.python-version }}
        uv pip install -e ".[dev]"

    - name: Run tests with pytest
      run: |
        uv run pytest --cov=seestar_mcp --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  mcp-integration-test:
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "18"

    - name: Install Python dependencies
      run: |
        uv venv --python 3.11
        uv pip install -e ".[dev]"

    - name: Install MCP test client
      run: |
        npm install -g mcp-test-client

    - name: Run MCP integration tests
      run: |
        node mcp-tests/test-mcp-integration.js

  build:
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, mcp-integration-test]
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release' || github.event_name == 'push'

    steps:
    - name: Debug workflow trigger
      run: |
        echo "Event name: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Ref type: ${{ github.ref_type }}"
        echo "Tag: ${{ github.ref_name }}"

    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Install build dependencies
      run: |
        uv venv --python 3.11
        uv pip install -e ".[dev]"

    - name: Build package
      run: |
        uv run python -m build

    - name: Check package
      run: |
        uv run python -m twine check dist/*

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release'

    steps:
    - name: Debug publish trigger
      run: |
        echo "Event name: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Ref type: ${{ github.ref_type }}"

    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}

  docker-publish:
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, mcp-integration-test]
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_docker == 'true')
    permissions:
      contents: write
      packages: write

    steps:
    - name: Debug docker publish trigger
      run: |
        echo "Event name: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Ref type: ${{ github.ref_type }}"

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Update release with Docker info
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        append_body: true
        body: |

          ## üê≥ Docker Image

          The Docker image for this release is available at:

          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          ```

          ### Quick Start with Docker

          ```bash
          # Set your telescope IP
          export SEESTAR_HOST=192.168.1.100
          export TELESCOPE_LATITUDE=34.0522
          export TELESCOPE_LONGITUDE=-118.2437
          export TELESCOPE_TIMEZONE=America/Los_Angeles

          # Run the container
          docker run -e SEESTAR_HOST -e TELESCOPE_LATITUDE -e TELESCOPE_LONGITUDE -e TELESCOPE_TIMEZONE ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          ```

          Or use docker-compose:

          ```bash
          curl -O https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/docker-compose.yml
          SEESTAR_HOST=192.168.1.100 docker-compose up -d
          ```
